{"version":3,"sources":["shared/components/UIElements/Card.js","varieties/components/Variety.js","varieties/components/VarietiesList.js","shared/components/FormElements/Filter.js","varieties/pages/Varieties.js","shared/hooks/http-hook.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","style","children","Variety","Fragment","to","name","description","quality","replace","toLowerCase","VarietiesList","items","length","map","variety","key","quality_potential","Filters","value","filters","producing_countries","onChange","handleSelect","options","countryOptions","isMulti","placeholder","isClearable","qualityOptions","leaf_rust","diseaseOptions","Varieties","useState","loadedVarieties","setLoadedVarieties","varieties","setVarieties","setFilters","setOptions","isLoading","setIsLoading","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","useHttpClient","rawOptions","disease_resistance","i","element","flatCountriesArray","option","flat","qualityArray","diseaseArray","getOptionsFromArray","fetchVarieties","optionsArray","Set","item","label","split","s","charAt","toUpperCase","substring","join","filterVarieties","newFilters","filteredVarieties","leafRust","find","disease","countries","some","country","includes","action","App","path","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.22a93f7c.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport './Variety.css'\nimport Card from '../../shared/components/UIElements/Card';\nimport { NavLink } from 'react-router-dom';\n\n\nconst Variety = props => {\n \n  return (\n    <React.Fragment>\n    <li className=\"variety-item\">\n   \n      <Card className=\"variety-item__content\">\n      <NavLink to={`/${props.name}`}>\n        <div>\n          <h2>{props.name}</h2>\n          <hr/>\n          <p>{props.description}</p>\n          <hr/>\n          <p>Quality: {props.quality.replace(/_/g, ' ').toLowerCase()}</p>\n        </div>\n        </NavLink>\n      </Card>\n     \n    </li>\n    </React.Fragment>\n  )\n};\n\nexport default Variety;","import React from 'react';\n\nimport Variety from './Variety'\nimport Card from '../../shared/components/UIElements/Card'\nimport './VarietiesList.css';\n\n\nconst VarietiesList = props => {\n  if (props.items.length === 0) {\n    return <div className=\"center\">\n      <Card>\n        <h2> No coffee varieties found.</h2>\n      </Card>\n    </div>\n  }\n\n  return (\n    <ul className=\"varieties-list\">\n      {props.items.map(variety => (\n        <Variety \n          key={variety.name} \n          name={variety.name}\n          description={variety.description}\n          quality={variety.quality_potential}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default VarietiesList;","import React from 'react';\n\nimport './Filter.css';\nimport Select from 'react-select';\n\nconst Filters = props => {\n  return (\n    <div className='wrapper'>\n    <h1>Coffee</h1>\n    <div className='filter-wrapper'>\n      <Select\n        className=\"element\"\n        value={props.filters.producing_countries}\n        onChange={props.handleSelect}\n        options={props.options.countryOptions}\n        isMulti\n        placeholder={\"Country\"}\n        name='producing_countries'\n      />\n      <Select\n        className=\"element\"\n        isClearable\n        value={props.filters.quality_potential}\n        onChange={props.handleSelect}\n        options={props.options.qualityOptions}\n        placeholder={\"Quality\"}\n        name='quality_potential'\n      />\n      <Select\n        className=\"element\"\n        isClearable\n        value={props.filters.leaf_rust}\n        onChange={props.handleSelect}\n        options={props.options.diseaseOptions}\n        placeholder={\"Leaf rust\"}\n        name='leaf_rust'\n      />\n      </div>\n    </div>\n  );\n};\nexport default Filters;","import React, {\n  useEffect,\n  useState\n} from 'react';\nimport VarietiesList from '../components/VarietiesList';\nimport Filters from '../../shared/components/FormElements/Filter'\n\nimport {\n  useHttpClient\n} from '../../shared/hooks/http-hook';\n\nconst Varieties = () => {\n  const [loadedVarieties, setLoadedVarieties] = useState();\n  const [varieties, setVarieties] = useState();\n  const [filters, setFilters] = useState({\n    producing_countries: [],\n    quality_potential: '',\n    leaf_rust: ''\n  });\n  const [options, setOptions] = useState();\n  \n  const {\n    isLoading,\n    sendRequest\n  } = useHttpClient();\n\n  useEffect(() => {\n    const fetchVarieties = async () => {\n      try {\n        const responseData = await sendRequest('https://coffee-varieties.now.sh/api');\n\n        let rawOptions = responseData.map(({ producing_countries, quality_potential, disease_resistance }) => {\n          let leaf_rust;\n          for (let i = 0; i < disease_resistance.length; i++) {\n            const element = disease_resistance[i];\n            if (element.leaf_rust) {\n              leaf_rust = element.leaf_rust;\n            }\n          }\n          return {producing_countries, quality_potential, leaf_rust }\n        });\n\n        let flatCountriesArray = rawOptions.map(option => option.producing_countries).flat();\n        let qualityArray = rawOptions.map(option => option.quality_potential);\n        let diseaseArray = rawOptions.map(option => option.leaf_rust);\n   \n        let qualityOptions = getOptionsFromArray(qualityArray);\n        let countryOptions = getOptionsFromArray(flatCountriesArray);\n        let diseaseOptions = getOptionsFromArray(diseaseArray);\n\n        let options = {\n          qualityOptions: qualityOptions,\n          countryOptions: countryOptions,\n          diseaseOptions: diseaseOptions\n        }\n        \n        setOptions(options);\n        setLoadedVarieties(responseData);\n        setVarieties(responseData);\n      } catch (err) {}\n    };\n    fetchVarieties();\n  }, [sendRequest]);\n\n  const handleSelect = (value, action) => {\n    let newFilters;\n    newFilters = {\n      ...filters,\n      [action.name]: value\n    };\n\n    setFilters(newFilters);\n    filterVarieties(newFilters);\n    \n  };\n\n  const getOptionsFromArray = (optionsArray) => {\n    let result = [...new Set(optionsArray)];\n    let options = result.map(item => {\n      return {value: item, label: item.replace(/_/g, ' ').toLowerCase().split(' ')\n      .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n      .join(' ')};\n    });\n    return options;\n\n  }\n\n  const filterVarieties = (newFilters) => {\n    const filteredVarieties = loadedVarieties.filter(item => {\n      let quality =\n        newFilters.quality_potential && newFilters.quality_potential !== \"\" ?\n        item.quality_potential.toLowerCase() === newFilters.quality_potential.value.toLowerCase() :\n        true;\n      let leafRust =\n        newFilters.leaf_rust && newFilters.leaf_rust !== \"\" ?\n        item.disease_resistance.find(disease => {\n          return disease.leaf_rust && (disease.leaf_rust.toLowerCase() === newFilters.leaf_rust.value.toLowerCase());\n        }) :\n        true;\n      let countries =\n        newFilters.producing_countries && newFilters.producing_countries.length > 0 ?\n        newFilters.producing_countries.some(country => {\n          return country && item.producing_countries.includes(country.value);\n        }) :\n        true;\n      return quality && leafRust && countries;\n    })\n    setVarieties(filteredVarieties);\n  }\n\n  return (\n\t\t<React.Fragment>\n\t\t\t{isLoading && (\n\t\t\t\t<div className=\"center\">\n\t\t\t\t\tLoading...\n\t\t\t\t</div>\n\t\t\t)}\n      {!isLoading && varieties && <Filters   \n        options={options}\n\t\t\t\tfilters={filters}\n        handleSelect={handleSelect}\n      />}\n      {!isLoading && varieties && <VarietiesList items={varieties} />}\n\t\t</React.Fragment>\n\t)\n};\n\nexport default Varieties;","import { useState, useCallback, useRef, useEffect } from 'react';\n\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const activeHttpRequests = useRef([]);\n\n  const sendRequest = useCallback(async (url, method = 'GET', body = null, headers= {}) => {\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      })\n\n      const responseData = await response.json();\n\n      activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrl);\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      throw err;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort())\n    }; // cleanup function\n  }, [])\n\n  return { isLoading, error, sendRequest, clearError}\n};","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport './App.css';\nimport Varieties from './varieties/pages/Varieties'\n\nfunction App() {\n\n  // let routes;\n  return ( \n    <Router>\n        <main>\n          <Route path=\"/\" exact>\n            <Varieties />\n          </Route>\n          <Route path=\"/:cid\" exact>\n           \n          </Route> \n          <Redirect to=\"/\" />\n        </main>\n      </Router>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}