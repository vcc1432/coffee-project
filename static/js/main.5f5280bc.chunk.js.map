{"version":3,"sources":["shared/components/UIElements/Card.js","varieties/components/Variety.js","varieties/components/VarietiesList.js","shared/components/FormElements/Filter.js","varieties/pages/Varieties.js","shared/hooks/http-hook.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","style","children","Variety","name","VarietiesList","items","length","map","variety","key","Filters","multiple","value","filters","producing_countries","onChange","handleSelect","quality_potential","leaf_rust","Varieties","useState","loadedVarieties","setLoadedVarieties","varieties","setVarieties","setFilters","isLoading","setIsLoading","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","useHttpClient","fetchVarieties","Fragment","onClear","Filter","event","newFilters","target","selectedCountries","options","option","selected","filteredVarieties","item","quality","toLowerCase","leafRust","disease_resistance","find","disease","countries","every","country","includes","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5f5280bc.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport './Variety.css'\nimport Card from '../../shared/components/UIElements/Card'\n\n\nconst Variety = props => {\n  return (\n    <li className=\"variety-item\">\n      <Card className=\"variety-item__content\">\n        <div>\n          <h2>{props.name}</h2>\n        </div>\n      </Card>\n    </li>\n  )\n};\n\nexport default Variety;","import React from 'react';\n\nimport Variety from './Variety'\nimport Card from '../../shared/components/UIElements/Card'\nimport './VarietiesList.css';\n\n\nconst VarietiesList = props => {\n  if (props.items.length === 0) {\n    return <div className=\"center\">\n      <Card>\n        <h2> No coffee varieties found.</h2>\n      </Card>\n    </div>\n  }\n\n  return (\n    <ul className=\"varieties-list\">\n      {props.items.map(variety => (\n        <Variety \n          key={variety.name} \n          name={variety.name}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default VarietiesList;","import React from 'react';\n\nconst Filters = props => {\n  return (\n    <div className='filter-wrapper'>\n      <select multiple className='filter-select' name='producing_countries' value={props.filters.producing_countries} onChange={props.handleSelect}>\n        <option value='Kenya'>Kenya</option>\n        <option value='Burundi'>Burundi</option>\n        <option value='Colombia'>Colombia</option>\n        <option value='Costa Rica'>Costa Rica</option>\n        <option value='Ethiopia'>Ethiopia</option>\n        <option value='Honduras'>Honduras</option>\n        <option value='Indonesia'>Indonesia</option>\n        <option value='Mexico'>Mexico</option>\n        <option value='Panama'>Panama</option>\n        <option value='Papua New Guinea'>Papua New Guinea</option>\n        <option value='Rwanda'>Rwanda</option>\n        <option value='Tanzania'>Tanzania</option>\n        <option value='Thailand'>Thailand</option>\n        <option value='Vietnam'>Vietnam</option>\n        <option value='Brazil'>Brazil</option>\n        <option value='Peru'>Peru</option>\n\n      </select>\n\n      <select className='filter-select' name='quality_potential' value={props.filters.quality_potential} onChange={props.handleSelect}>\n        <option value=''>Search by Quality</option>\n        <option value='EXCEPTIONAL'>EXCEPTIONAL</option>\n        <option value='VERY_GOOD'>VERY_GOOD</option>\n        <option value='GOOD'>GOOD</option>\n        <option value='LOW'>LOW</option>\n        <option value='VERY_LOW'>VERY_LOW</option>\n      </select>\n\n      <select className='filter-select' name='leaf_rust' value={props.filters.leaf_rust} onChange={props.handleSelect}>\n        <option value=''>Search by leaf rust resistance</option>    \n        <option value='RESISTANT'>RESISTANT</option>\n        <option value='TOLERANT'>TOLERANT</option>\n        <option value='SUSCEPTIBLE'>SUSCEPTIBLE</option>\n      </select>\n    </div>\n  );\n};\nexport default Filters;","import React, {\n  useEffect,\n  useState\n} from 'react';\nimport VarietiesList from '../components/VarietiesList';\nimport Filters from '../../shared/components/FormElements/Filter'\n\nimport {\n  useHttpClient\n} from '../../shared/hooks/http-hook';\n\nconst Varieties = () => {\n    const [loadedVarieties, setLoadedVarieties] = useState();\n    const [varieties, setVarieties] = useState();\n    const [filters, setFilters] = useState({\n      producing_countries: [],\n      quality_potential: '',\n      leaf_rust: ''\n    });\n    const {\n      isLoading,\n      error,\n      sendRequest,\n      clearError\n    } = useHttpClient();\n\n    useEffect(() => {\n      const fetchVarieties = async () => {\n        try {\n          const responseData = await sendRequest('https://coffee-varieties.now.sh/api');\n          setLoadedVarieties(responseData);\n          setVarieties(responseData);\n        } catch (err) {}\n      };\n      fetchVarieties();\n    }, [sendRequest]);\n\n\n    const handleSelect = (event) => {\n      let newFilters;\n      if (event.target.name === 'producing_countries') {\n        let selectedCountries = [];\n        [...event.target.options].filter(option => option.selected).map(option => selectedCountries.push(option.value));\n        newFilters = {\n          ...filters,\n          [event.target.name]: selectedCountries\n        };\n      } else {\n        newFilters = {\n          ...filters,\n          [event.target.name]: event.target.value\n        };\n      }\n\n      setFilters(newFilters);\n\n      const filteredVarieties = loadedVarieties.filter(item => {\n        let quality =\n          newFilters.quality_potential !== \"\" ?\n          item.quality_potential.toLowerCase() === newFilters.quality_potential.toLowerCase() :\n          true;\n        let leafRust =\n          newFilters.leaf_rust !== \"\" ?\n          item.disease_resistance.find(disease => {\n            return disease.leaf_rust && (disease.leaf_rust.toLowerCase() === newFilters.leaf_rust.toLowerCase());\n          }) :\n          true;\n        let countries =\n          newFilters.producing_countries.length > 0 ?\n          newFilters.producing_countries.every(country => {\n            return country && item.producing_countries.includes(country);\n          }) :\n          true;\n        return quality && leafRust && countries;\n      })\n      setVarieties(filteredVarieties);\n\n\n    };\n\n    return ( <\n        React.Fragment >\n        <\n        div error = {\n          error\n        }\n        onClear = {\n          clearError\n        }\n        /> {\n          isLoading && ( <\n            div className = \"center\" >\n            Loading...\n            <\n            /div>\n          )\n        } {\n          !isLoading && varieties && < Filters\n          filters = {\n            filters\n          }\n          handleSelect = {\n            handleSelect\n          }\n          />} {\n            !isLoading && varieties && < VarietiesList items = {\n              varieties\n            }\n            />} <\n            /React.Fragment>\n          );\n        };\n\n        export default Varieties;","import { useState, useCallback, useRef, useEffect } from 'react';\n\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const activeHttpRequests = useRef([]);\n\n  const sendRequest = useCallback(async (url, method = 'GET', body = null, headers= {}) => {\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      })\n\n      const responseData = await response.json();\n\n      activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrl);\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      throw err;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort())\n    }; // cleanup function\n  }, [])\n\n  return { isLoading, error, sendRequest, clearError}\n};","import React from 'react';\nimport './App.css';\nimport Varieties from './varieties/pages/Varieties'\n\nfunction App() {\n  return ( <\n    Varieties / >\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}